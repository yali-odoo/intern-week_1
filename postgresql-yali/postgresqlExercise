exercise from https://pgexercises.com/questions/joins/simplejoin2.html
#Table relation
Q1.How can you produce a list of the start times for bookings for tennis courts, for the date '2012-09-21'? Return a list of start time and facility name pairings, ordered by the time.

SELECT cdb.starttime AS start, cdf.name FROM cd.bookings cdb
                       INNER JOIN cd.facilities cdf
			       ON cdb.facid=cdf.facid
			       WHERE cdf.name IN ('Tennis Court 1', 'Tennis Court 2')
				     AND
				     cdb.starttime>='2012-09-21'
				     AND
				     cdb.starttime<'2012-09-22'
				ORDER BY cdb.starttime;
							  
Q2.How can you output a list of all members, including the individual who recommended them (if any)? Ensure that results are ordered by (surname, firstname).


SELECT mem.firstname AS memfname, mem.surname AS memsname, rec.firstname AS recfname, rec.surname AS recsname
      FROM  cd.members mem
		LEFT OUTER JOIN cd.members rec
			ON mem.recommendedby=rec.memid
                ORDER BY memsname, memfname;
                

Q3.How can you produce a list of all members who have used a tennis court? Include in your output the name of the court, and the name of the member formatted as a single column. Ensure no duplicate data, and order by the member name followed by the facility name.

SELECT DISTINCT mem.firstname||' '||mem.surname AS member,cdf.name AS facility
       FROM  cd.members mem
	         INNER JOIN cd.bookings cdb
			       ON mem.memid=cdb.memid
			 INNER JOIN cd.facilities cdf
			       ON cdb.facid=cdf.facid
		WHERE cdf.name IN ('Tennis Court 1', 'Tennis Court 2')
                ORDER BY member, facility;
#Manipulate data
Q1:In the previous exercise, you learned how to add a facility. Now you're going to add multiple facilities in one command. Use the following values:
    facid: 9, Name: 'Spa', membercost: 20, guestcost: 30, initialoutlay: 100000, monthlymaintenance: 800.
    facid: 10, Name: 'Squash Court 2', membercost: 3.5, guestcost: 17.5, initialoutlay: 5000, monthlymaintenance: 80.

INSERT INTO cd.facilities (facid,name,membercost,guestcost,initialoutlay,monthlymaintenance)
             VALUES(9,'Spa',20,30,100000,800),
                   (10,'Squash Court 2',3.5,17.5,5000,80);
                   
Q2:Let's try adding the spa to the facilities table again. This time, though, we want to automatically generate the value for the next facid, rather than specifying it as a constant. Use the following values for everything else:
    Name: 'Spa', membercost: 20, guestcost: 30, initialoutlay: 100000, monthlymaintenance: 800.
    
INSERT INTO cd.facilities (facid,name,membercost,guestcost,initialoutlay,monthlymaintenance)
       SELECT(SELECT MAX(facid) FROM cd.facilities)+1,'Spa',20,30,100000,800;

Q3:We want to alter the price of the second tennis court so that it costs 10% more than the first one. Try to do this without using constant values for the prices, so that we can reuse the statement if we want to.

UPDATE cd.facilities cdf1
      SET membercost=cdf2.membercost*(1+0.1),
	      guestcost=cdf2.guestcost*(1+0.1)
	  FROM(SELECT* FROM cd.facilities WHERE facid=0) cdf2
	  WHERE cdf1.facid=1;

Q4:In our previous exercises, we deleted a specific member who had never made a booking. How can we make that more general, to delete all members who have never made a booking? 

DELETE FROM cd.members WHERE memid NOT IN (SELECT memid FROM cd.bookings);

#Aggregates
Q1:Produce a list of the total number of slots booked per facility. For now, just produce an output table consisting of facility id and slots, sorted by facility id.

SELECT facid, SUM(slots) AS "Total Slots"
       FROM cd.bookings
	   GROUP BY facid
	   ORDER BY facid;
	   
Q2:Produce a list of the total number of slots booked per facility in the month of September 2012. Produce an output table consisting of facility id and slots, sorted by the number of slots.

SELECT facid,SUM(slots) AS "Total Slots"
       FROM cd.bookings
	   WHERE starttime>'2012-09-01'
	        AND
			 starttime<'2012-10-01'
			 GROUP BY facid
			 ORDER BY SUM(slots);

Q3:Produce a list of the total number of hours booked per facility, remembering that a slot lasts half an hour. The output table should consist of the facility id, name, and hours booked, sorted by facility id. Try formatting the hours to two decimal places. 

SELECT cdf.facid,cdf.name,ROUND(SUM(cdb.slots)/2.0,2) AS "Total Hours" 
	    FROM cd.facilities cdf
		INNER JOIN cd.bookings cdb
		      ON cdf.facid=cdb.facid
			  GROUP BY cdf.facid, cdf.name
			  ORDER BY cdf.facid;
			  
#Date
Q1:Find the result of subtracting the timestamp '2012-07-30 01:00:00' from the timestamp '2012-08-31 01:00:00' 

SELECT timestamp'2012-08-31 01:00:00'-timestamp'2012-07-30 01:00:00' AS interval;

Q2:Produce a list of all the dates in October 2012. They can be output as a timestamp (with time set to midnight) or a date. 

SELECT GENERATE_SERIES(timestamp '2012-10-01',timestamp '2012-10-31', INTERVAL'1 day') AS ts;

Q3:For each month of the year in 2012, output the number of days in that month. Format the output as an integer column containing the month of the year, and a second column containing an interval data type

SELECT EXTRACT(month FROM cal.month) AS month,
       (cal.month+INTERVAL '1 month')-cal.month AS length
	   FROM (SELECT GENERATE_SERIES(timestamp '2012-01-01',timestamp '2012-12-31', INTERVAL'1 month') AS month) cal
	   
	   ORDER BY month;
	   
	   
#String operation
Q1:Perform a case-insensitive search to find all facilities whose name begins with 'tennis'. Retrieve all columns.

SELECT facid,name,membercost,guestcost,initialoutlay,monthlymaintenance
       FROM cd.facilities
       WHERE LOWER(name) LIKE'tennis%';
       
Q2:You've noticed that the club's member table has telephone numbers with very inconsistent formatting. You'd like to find all the telephone numbers that contain parentheses, returning the member ID and telephone number sorted by member ID

SELECT memid,telephone FROM cd.members
       WHERE telephone LIKE '(%)%'  
	   ORDER BY memid;
##or from solution
select memid, telephone from cd.members where telephone similar to '%[()]%';

	   
Q3:The zip codes in our example dataset have had leading zeroes removed from them by virtue of being stored as a numeric type. Retrieve all zip codes from the members table, padding any zip codes less than 5 characters long with leading zeroes. Order by the new zip code

SELECT LPAD(cast(zipcode AS CHAR(5)),5,'0') zip 
       FROM cd.members 
	   ORDER BY zip;
	   
#Recursive

Q1:Find the upward recommendation chain for member ID 27: that is, the member who recommended them, and the member who recommended that member, and so on. Return member ID, first name, and surname. Order by descending member id. 

Q2:Find the downward recommendation chain for member ID 1: that is, the members they recommended, the members those members recommended, and so on. Return member ID and name, and order by ascending member id. 

Q3:Produce a CTE that can return the upward recommendation chain for any member. You should be able to select recommender from recommenders where member=x. Demonstrate it by getting the chains for members 12 and 22. Results table should have member and recommender, ordered by member ascending, recommender descending. 
